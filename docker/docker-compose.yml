services:

  #DEBEZIUM CONFIGURATION
  debezium:
    image: debezium/connect:1.4
    container_name: debezium
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka]
    ports:
      - 8083:8083

  #KAFKA SERVICES CONFIGURATION
  schema-registry:
    container_name: schema-registry
    #image: confluentinc/cp-schema-registry:5.5.3
    image: confluentinc/cp-schema-registry:7.4.4
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    ports:
      - 8081:8081
    depends_on: [zookeeper, kafka]

  zookeeper:
    image: quay.io/debezium/zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:29092
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_manager:
    container_name: kafka-mngr
    image: kafkamanager/kafka-manager #hlebalbau/kafka-manager:stable
    restart: always
    ports:
      - "9010:9010"
    depends_on:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "random-secret"

  #MONGODB CLUSTER CONFIGURATION
  #MONGODB-1
  mongo1:
    image: mongo:7.0.5
    container_name: mongo-1
    ports:
      - "27017:27017"
    command: mongod --replSet rs0 --bind_ip localhost,mongo1
    networks:
      - mongoCluster

  #MONGODB-1
  mongo2:
    image: mongo:7.0.5
    container_name: mongo-2
    ports:
      - "27018:27017"
    command: mongod --replSet rs0 --bind_ip localhost,mongo2
    networks:
      - mongoCluster

#  #MONGODB-1
#  mongo-1:
#    image: mongo:7.0.5
#    container_name: mongo1
#    ports:
#      - "27019:27019"
#    command: mongod --replSet rs0 --port 27019 --bind_ip_all
#    depends_on:
#      - mongo-2
#    networks:
#      - mongo-cluster
#
#  #MONGODB-2
#  mongo-2:
#    image: mongo:7.0.5
#    container_name: mongo2
#    ports:
#      - "27018:27018"
#    command: mongod --replSet rs0 --port 27018 --bind_ip_all
#    networks:
#      - mongo-cluster

  #GRAFANA CONFIGURATION
  grafana:
    image: grafana/grafana:latest  # Specify a compatible version
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Set the admin password
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel  # Optional plugins
    ports:
      - "3010:3000"  # Expose Grafana on port 3000
    volumes:
      - grafana-storage:/var/lib/grafana  # Persist data
    #depends_on:
    #  - mongo-1  # If you want to visualize MongoDB data, adjust dependencies accordingly

# Volume section for grafana
volumes:
  grafana-storage:

networks:
  mongoCluster:
